const cron = require('node-cron')
const { loadUsers } = require('./database')
const { getReminderButtons } = require('../utils/keyboards')

const scheduledTasks = new Map()

function startReminderSystem(bot) {
	console.log('üîî –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞')

	cron.schedule('* * * * *', async () => {
		await checkReminders(bot)
	})

	console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ 0 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
}

async function checkReminders(bot) {
	try {
		const users = await loadUsers()
		const now = new Date()
		const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now
			.getMinutes()
			.toString()
			.padStart(2, '0')}`

		for (const [userId, userData] of Object.entries(users)) {
			if (!userData.habits) continue

			for (const habit of userData.habits) {
				if (habit.reminderTimes && habit.reminderTimes.includes(currentTime)) {
					await sendReminder(bot, userId, habit)
				}
			}
		}
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error)
	}
}

async function sendReminder(bot, userId, habit) {
	try {
		const today = new Date().toISOString().split('T')[0]
		if (habit.completions && habit.completions.includes(today)) {
			return
		}

		const reminderMessage = `
üîî –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï

‚è∞ –í—Ä–µ–º—è –¥–ª—è: **${habit.name}**

${getMotivationalMessage(habit)}

–û—Ç–º–µ—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ! üëá
        `

		await bot.api.sendMessage(userId, reminderMessage, {
			parse_mode: 'Markdown',
			reply_markup: getReminderButtons(habit.id),
		})

		console.log(
			`üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –æ "${habit.name}"`
		)
	} catch (error) {
		console.error(
			`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`,
			error
		)
	}
}

function getMotivationalMessage(habit) {
	const habitName = habit.name.toLowerCase()

	if (habitName.includes('–≤–æ–¥–∞') || habitName.includes('–ø–∏—Ç—å')) {
		return 'üíß –¢–≤–æ–µ —Ç–µ–ª–æ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –≤–æ–¥–µ! –í—ã–ø–µ–π —Å—Ç–∞–∫–∞–Ω –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.'
	}

	if (
		habitName.includes('–∑–∞—Ä—è–¥–∫–∞') ||
		habitName.includes('—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è') ||
		habitName.includes('—Å–ø–æ—Ä—Ç')
	) {
		return 'üí™ –î–≤–∏–∂–µ–Ω–∏–µ - —ç—Ç–æ –∂–∏–∑–Ω—å! –°–¥–µ–ª–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.'
	}

	if (habitName.includes('—á–∏—Ç–∞—Ç—å') || habitName.includes('–∫–Ω–∏–≥–∞')) {
		return 'üìö –ó–Ω–∞–Ω–∏—è - —Å–∏–ª–∞! –ü—Ä–æ—á–∏—Ç–∞–π —Ö–æ—Ç—è –±—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü.'
	}

	if (habitName.includes('–º–µ–¥–∏—Ç–∞—Ü–∏—è') || habitName.includes('–¥—ã—Ö–∞–Ω–∏–µ')) {
		return 'üßò‚Äç‚ôÄÔ∏è –í—Ä–µ–º—è –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–æ–∫–æ—è. –°–¥–µ–ª–∞–π –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö.'
	}

	const generalMessages = [
		'üåü –ö–∞–∂–¥—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ —Ü–µ–ª–∏!',
		'üöÄ –¢—ã –º–æ–∂–µ—à—å —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å! –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏.',
		'üí´ –ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É.',
		'üèÜ –¢–≤–æ–µ –±—É–¥—É—â–µ–µ "–Ø" —Å–∫–∞–∂–µ—Ç —Å–ø–∞—Å–∏–±–æ!',
		'‚≠ê –ü—Ä–µ–≤—Ä–∞—â–∞–π –º–µ—á—Ç—ã –≤ –ø—Ä–∏–≤—ã—á–∫–∏!',
	]

	return generalMessages[Math.floor(Math.random() * generalMessages.length)]
}

function addHabitReminders(userId, habit) {
	console.log(
		`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è "${habit.name}" –≤ ${habit.reminderTimes.join(
			', '
		)}`
	)
}

function removeHabitReminders(userId, habitId) {
	console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ ${habitId}`)
}

function snoozeReminder(bot, userId, habitId) {
	setTimeout(async () => {
		console.log(
			`‚è∞ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, –ø—Ä–∏–≤—ã—á–∫–∞ ${habitId}`
		)
	}, 30 * 60 * 1000)
}

module.exports = {
	startReminderSystem,
	addHabitReminders,
	removeHabitReminders,
	snoozeReminder,
}
