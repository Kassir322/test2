require('dotenv').config()

const { Bot } = require('grammy')

const {
	startCommand,
	helpCommand,
	handleCallbackQuery,
} = require('./modules/commands')
const { startReminderSystem } = require('./modules/reminders')
const { createHabit } = require('./modules/habits')
const { getTimeBasedGreeting } = require('./utils/helpers')

const bot = new Bot(process.env.BOT_TOKEN)

const userStates = new Map()

console.log('ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ "–¢—Ä–µ–∫–µ—Ä –ü—Ä–∏–≤—ã—á–µ–∫"...')

bot.command('start', async (ctx) => {
	console.log(
		`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.first_name} (${ctx.from.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`
	)
	await startCommand(ctx)
})

bot.command('help', async (ctx) => {
	console.log(`‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É`)
	await helpCommand(ctx)
})

bot.on('callback_query', async (ctx) => {
	const callbackData = ctx.callbackQuery.data
	const userId = ctx.from.id

	console.log(`üîò –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: ${callbackData}`)

	try {
		if (callbackData === 'add_habit') {
			userStates.set(userId, { action: 'waiting_habit_name' })
		}

		if (callbackData.startsWith('complete_')) {
			const habitId = callbackData.replace('complete_', '')
			await handleHabitCompletion(ctx, habitId)
			return
		}

		if (callbackData.startsWith('snooze_')) {
			const habitId = callbackData.replace('snooze_', '')
			await handleSnoozeReminder(ctx, habitId)
			return
		}

		if (callbackData.startsWith('skip_')) {
			await ctx.answerCallbackQuery(
				'‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –∑–∞–≤—Ç—Ä–∞ –ø–æ–ª—É—á–∏—Ç—Å—è!'
			)
			return
		}

		await handleCallbackQuery(ctx)
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error)
		await ctx.answerCallbackQuery('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
	}
})

// bot.on('message:text', async (ctx) => {
// 	const userId = ctx.from.id
// 	const messageText = ctx.message.text
// 	const userState = userStates.get(userId)

// 	console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userId}: "${messageText}"`)

// 	try {
// 		if (userState && userState.action === 'waiting_habit_name') {
// 			await handleNewHabitName(ctx, messageText)
// 			return
// 		}

// 		if (userState && userState.action === 'waiting_reminder_time') {
// 			await handleReminderTime(ctx, messageText)
// 			return
// 		}

// 		await handleRegularMessage(ctx, messageText)
// 	} catch (error) {
// 		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
// 		await ctx.reply(
// 			'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /start'
// 		)
// 	}
// })

async function handleNewHabitName(ctx, habitName) {
	const userId = ctx.from.id

	if (habitName.length < 2) {
		await ctx.reply('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:')
		return
	}

	if (habitName.length > 100) {
		await ctx.reply('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∫–æ—Ä–æ—á–µ:')
		return
	}

	userStates.set(userId, {
		action: 'waiting_reminder_time',
		habitName: habitName,
	})

	const timeMessage = `
‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏–≤—ã—á–∫–∞ "${habitName}" –ø–æ—á—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞.

‚è∞ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.

üìù –ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ 09:00 - –æ–¥–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 9 —É—Ç—Ä–∞
‚Ä¢ 09:00 15:00 21:00 - —Ç—Ä–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –¥–µ–Ω—å
‚Ä¢ 08:30 20:30 - —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º

‚å®Ô∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:
    `

	await ctx.reply(timeMessage)
}

async function handleReminderTime(ctx, timeText) {
	const userId = ctx.from.id
	const userState = userStates.get(userId)

	if (!userState || !userState.habitName) {
		await ctx.reply('‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞ —Å /start')
		return
	}

	const times = timeText.trim().split(/\s+/)
	const validTimes = []
	const invalidTimes = []

	for (const time of times) {
		if (/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/.test(time)) {
			validTimes.push(time)
		} else {
			invalidTimes.push(time)
		}
	}

	if (invalidTimes.length > 0) {
		await ctx.reply(
			`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è: ${invalidTimes.join(
				', '
			)}\n\n‚å®Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00 15:30)`
		)
		return
	}

	if (validTimes.length === 0) {
		await ctx.reply(
			'‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n‚å®Ô∏è –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú'
		)
		return
	}

	try {
		const newHabit = await createHabit(userId, userState.habitName, validTimes)

		userStates.delete(userId)

		const successMessage = `
üéâ –ü—Ä–∏–≤—ã—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!

${getRandomHabitEmoji()} **${newHabit.name}**
‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${validTimes.join(', ')}

–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è. 
–ù–µ –∑–∞–±—ã–≤–∞–π –æ—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ! üí™
        `

		await ctx.reply(successMessage, {
			parse_mode: 'Markdown',
			reply_markup: require('./utils/keyboards').getMainMenu(),
		})

		console.log(
			`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏–≤—ã—á–∫–∞ "${newHabit.name}" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`
		)
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏:', error)
		await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
	}
}

async function handleHabitCompletion(ctx, habitId) {
	const userId = ctx.from.id

	try {
		const { completeHabit } = require('./modules/habits')
		const result = await completeHabit(userId, habitId)

		if (result.alreadyCompleted) {
			await ctx.answerCallbackQuery('‚úÖ –≠—Ç–∞ –ø—Ä–∏–≤—ã—á–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è!')
		} else {
			const { getStreakMessage } = require('./utils/helpers')
			const streakMsg = getStreakMessage(result.habit.streak)

			await ctx.answerCallbackQuery(
				'üéâ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!'
			)
			await ctx.reply(
				`‚úÖ **${result.habit.name}** –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n${streakMsg}`,
				{
					parse_mode: 'Markdown',
				}
			)
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏:', error)
		await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
	}
}

async function handleSnoozeReminder(ctx, habitId) {
	await ctx.answerCallbackQuery('‚è∞ –ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç!')

	const { snoozeReminder } = require('./modules/reminders')
	snoozeReminder(bot, ctx.from.id, habitId)
}

async function handleRegularMessage(ctx, messageText) {
	const greeting = getTimeBasedGreeting()

	const helpMessage = `
${greeting}! üëã

–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏.

üéØ –ò—Å–ø–æ–ª—å–∑—É–π:
‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ –ò–ª–∏ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

üí° –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.
    `

	await ctx.reply(helpMessage, {
		reply_markup: require('./utils/keyboards').getMainMenu(),
	})
}

function getRandomHabitEmoji() {
	const emojis = ['‚≠ê', 'üéØ', 'üí™', 'üöÄ', '‚ö°', 'üî•', 'üíé', 'üåü']
	return emojis[Math.floor(Math.random() * emojis.length)]
}

async function startBot() {
	try {
		console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...')

		startReminderSystem(bot)

		await bot.start()

		console.log('‚úÖ –ë–æ—Ç "–¢—Ä–µ–∫–µ—Ä –ü—Ä–∏–≤—ã—á–µ–∫" —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
		console.log('üì± –ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è...')
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error)
		process.exit(1)
	}
}

process.on('SIGINT', () => {
	console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...')
	console.log('üëã –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!')
	process.exit(0)
})

process.on('unhandledRejection', (error) => {
	console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
})

startBot()
